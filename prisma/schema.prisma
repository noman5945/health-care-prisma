// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String  @id @default(uuid())
  email String @unique
  password String
  role UserRole
  needPasswordChange Boolean @default(true)
  status UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
  Admin Admin?
  Doctor Doctor?
  Patient Patient?
}

model Admin{
  id String  @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email],references: [email])
  @@map("admins")
}

model Doctor{
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  address String?
  registrationNumber String
  experience Int
  gender Gender
  appointmentFee Int
  qualification String
  currentWorkingPlace String
  designation String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [email],references: [email])
  @@map("doctors")
  DoctorSpecialties DoctorSpecialties[]
}

model Patient{
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  address String?
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [email],references: [email])
  @@map("patients")
  PatientHealthData PatientHealthData?
  MedicalReport MedicalReport[]
}

model Specialties{
  id String @id @default(uuid())
  title String
  icon String
  DoctorSpecialties DoctorSpecialties[]

  @@map("specialties")
}

model  DoctorSpecialties{
   specialitiesId String
   specialties Specialties @relation(fields: [specialitiesId],references: [id])
   doctorId String
   doctors Doctor @relation(fields: [doctorId],references: [id])
   @@id([specialitiesId,doctorId])
   @@map("doctor_specialties")
}

model PatientHealthData{
  id String @id @default(uuid())
  patientId String @unique
  dateOfBirth DateTime
  gender Gender
  bloodGroup BloodGroup
  hasAllergies Boolean
  hasDiabetes Boolean
  height String
  weight String
  smokingStatus Boolean
  dietaryPreferences String
  pregnancyStatus Boolean
  mentalHealthHistory String
  immunizationStatus String
  hasPastSurgeries Boolean
  recentAnxiety Boolean
  recentDepression Boolean
  maritalStatus MaritalStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patient Patient @relation(fields: [patientId],references: [id])

  @@map("patient_health_data")
}

model MedicalReport{
  id String @id @default(uuid())
  patientId String
  reportName String
  reportLink String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patient Patient @relation(fields: [patientId],references: [id])
}

enum UserRole{
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus{
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender{
  MALE
  FEMALE
}

enum MaritalStatus{
  MARRIED
  UNMARRIED
}

enum BloodGroup{
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGETIVE
  B_NEGETIVE
  O_NEGETIVE
  AB_NEGETIVE
}